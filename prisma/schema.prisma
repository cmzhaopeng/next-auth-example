// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  userGroup  UserGroup[]

}

model Group {
  id    String @id @default(cuid())
  name  String
  groupDescription String? @map("group_description")
  userGroup UserGroup[]
  groupPrivilege GroupPrivilege[]
}

model UserGroup {
  id    String @id @default(cuid())
  user  User @relation(fields: [userId], references: [id])
  userId String @map("user_id") 
  group Group @relation(fields: [groupId], references: [id])
  groupId String @map("group_id")
}

model Privilege {
  id    String @id @default(cuid())
  name  String
  privilegeType String @map("privilege_type")
  privilegeContent String? @map("privilege_content")
  description String?
  groupPrivilege GroupPrivilege[]
}

model GroupPrivilege {
  id    String @id @default(cuid())
  group Group @relation(fields: [groupId], references: [id])
  groupId String @map("group_id")
  privilege Privilege @relation(fields: [privilegeId], references: [id])
  privilegeId String @map("privilege_id")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}