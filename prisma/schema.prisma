// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
 // userGroup  UserGroup[] @relation("ReferId")
  userGroup UserGroup[] @relation("ReferEmail")


}

model Group {
  id    String @id @default(cuid())
  name  String @unique
  groupDescription String? @map("group_description")
  //userGroup UserGroup[] @relation("ReferId")
  userGroup UserGroup[] @relation("ReferName")

  groupPrivilege GroupPrivilege[]
}

model UserGroup {
  id    String @id @default(cuid())
 // user  User @relation("ReferId",fields: [userId], references: [id])
  user  User @relation("ReferEmail",fields: [userEmail], references: [email])
  //userId String @map("user_id") 
  userEmail String @map("user_email") 
  //group Group @relation("ReferId",fields: [groupId], references: [id])
  group Group @relation("ReferName",fields: [groupName], references: [name])
  //groupId String @map("group_id")
  groupName String @map("group_name")
}

model Privilege {
  id    String @id @default(cuid())
  name  String @unique
  privilegeType String @map("privilege_type")
  privilegeContent String? @map("privilege_content")
  description String?
  //groupPrivilege GroupPrivilege[] @relation("ReferId")
  groupPrivilege GroupPrivilege[] @relation("ReferName")
}

model GroupPrivilege {
  id    String @id @default(cuid())
  group Group @relation(fields: [groupName], references: [name])
  groupName String @map("group_name")
  //privilege Privilege @relation("ReferId",fields: [privilegeId], references: [id])
  privilege Privilege @relation("ReferName",fields: [privilegeName], references: [name])
 // privilegeId String @map("privilege_id")
  privilegeName String @map("privilege_name")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id Int @id @default(autoincrement())
  startAddress String @map("start_address")
  endAddress String @map("end_address")
  // 0 white 1 black
  addressType String @map("address_type")
  addressDescription String @map("address_description")
  startIntAddress BigInt   @map("start_int_address")
  endIntAddress BigInt @map("end_int_address")
  protocol String
  applicant String
  approver String?
  //0 apply 1 approve 2 be written to fw 3 reject apply 4 apply delete 5 approve delete 6 reject delete 
  status Int
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

}