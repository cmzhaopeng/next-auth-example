generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  userGroup     UserGroup[] @relation("ReferEmail")
}

model Group {
  id               String           @id @default(cuid())
  name             String           @unique
  groupDescription String?          @map("group_description")
  groupPrivilege   GroupPrivilege[]
  userGroup        UserGroup[]      @relation("ReferName")
}

model UserGroup {
  id        String @id @default(cuid())
  userEmail String @map("user_email")
  groupName String @map("group_name")
  group     Group  @relation("ReferName", fields: [groupName], references: [name])
  user      User   @relation("ReferEmail", fields: [userEmail], references: [email])
}

model Privilege {
  id               String           @id @default(cuid())
  name             String           @unique
  privilegeType    String           @map("privilege_type")
  privilegeContent String?          @map("privilege_content")
  description      String?
  sort_no          Int?
  groupPrivilege   GroupPrivilege[] @relation("ReferName")
}

model GroupPrivilege {
  id            String    @id @default(cuid())
  groupName     String    @map("group_name")
  privilegeName String    @map("privilege_name")
  group         Group     @relation(fields: [groupName], references: [name])
  privilege     Privilege @relation("ReferName", fields: [privilegeName], references: [name])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id                 Int       @id @default(autoincrement())
  startAddress       String    @map("start_address")
  endAddress         String    @map("end_address")
  addressType        String    @map("address_type")
  addressDescription String    @map("address_description")
  startIntAddress    BigInt    @map("start_int_address")
  endIntAddress      BigInt    @map("end_int_address")
  protocol           String
  applicant          String
  approver           String?
  status             Int
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
}
